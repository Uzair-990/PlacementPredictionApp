selectInput('Gender', 'select gender :', c("Male","Female"),selected = "Male"),
selectInput('Stream', 'Select stream :', c("Civil","Computer Science","Electrical","Electronics And Communication","Information Technology","Mechanical"),selected = "Computer Science"),
selectInput('Internships', 'Select no of interships :', c(0:3),selected = 3L),
selectInput('CGPA', 'Select cgpa :', c(1:10),selected = 7),
selectInput('HistoryOfBacklogs', 'any history of blacklogs :', c(0,1)),
submitButton("SUBMIT", ""),setBackgroundImage(
src = "sbg.png"
)),
mainPanel(br(),br(),br(),br(),br(),br(),p("Predicted outcome based on submitted values are:"),verbatimTextOutput('result'),
tags$head(tags$style("#result{color: black;
font-size: 30px;
font-style: italic;
font-align: center;
}"
),
setBackgroundImage(
src = "bg.png"
)
))
),
)
))
server <- function(input, output) {
output$result <- renderText({
fir.rf <- load("model.RData")
Age <- as.integer(input$Age)
Gender <- factor(input$Gender)
Stream <- factor(input$Stream)
Internships <- factor(input$Internships)
CGPA <- as.integer(input$CGPA)
HistoryOfBacklogs <- factor(input$HistoryOfBacklogs)
rundf <-data.frame(Age, Gender, Stream, Internships, CGPA, HistoryOfBacklogs)
predictedvalue <- predict(fit.rf, rundf)
sprintf("This student %s",ifelse(predictedvalue == 1, "may be placed", "may not be placed"))
})
}
shinyApp(ui, server)
ui <- shinyUI(
navbarPage(id="Test", "Placement Prediction",
header = tagList(
useShinydashboard()
),
tabPanel(
"APP", value="predict",#style = sprintf(backgroundImageCSS,  "https://paradoxcat.com/wp-content/uploads/2021/06/img_pdx_header_ai.jpg"),
fluidPage(sidebarPanel(numericInput('Age', 'Enter age  :', 22),
selectInput('Gender', 'select gender :', c("Male","Female"),selected = NULL),
selectInput('Stream', 'Select stream :', c("Civil","Computer Science","Electrical","Electronics And Communication","Information Technology","Mechanical"),selected = NULL),
selectInput('Internships', 'Select no of interships :', c(0:3),selected = NULL),
selectInput('CGPA', 'Select cgpa :', c(1:10),selected = NULL),
selectInput('HistoryOfBacklogs', 'any history of blacklogs :', c(0,1)),
submitButton("SUBMIT", ""),setBackgroundImage(
src = "sbg.png"
)),
mainPanel(br(),br(),br(),br(),br(),br(),p("Predicted outcome based on submitted values are:"),verbatimTextOutput('result'),
tags$head(tags$style("#result{color: black;
font-size: 30px;
font-style: italic;
font-align: center;
}"
),
setBackgroundImage(
src = "bg.png"
)
))
),
)
))
server <- function(input, output) {
output$result <- renderText({
fir.rf <- load("model.RData")
Age <- as.integer(input$Age)
Gender <- factor(input$Gender)
Stream <- factor(input$Stream)
Internships <- factor(input$Internships)
CGPA <- as.integer(input$CGPA)
HistoryOfBacklogs <- factor(input$HistoryOfBacklogs)
rundf <-data.frame(Age, Gender, Stream, Internships, CGPA, HistoryOfBacklogs)
predictedvalue <- predict(fit.rf, rundf)
sprintf("This student %s",ifelse(predictedvalue == 1, "may be placed", "may not be placed"))
})
}
shinyApp(ui, server)
library(caret)
dataset <- read.csv(choose.files())
dataset
cor(dataset)
corr(dataset)
cor(dataset)
levels(dataset)
dataset <- read.csv(choose.files())
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
head(dataset)
summary(dataset)
featurePlot(x=dataset$PlacedOrNot,y=dataset$CGPA,plot="ellipse")
dataset <- read.csv(choose.files())
cor(dataset)
dataset
summary(dataset)
head(dataset)
summary(dataset)
featurePlot(x=dataset$PlacedOrNot,y=dataset$CGPA,plot="ellipse")
featurePlot(x=dataset$PlacedOrNot,y=dataset$CGPA,plot="ellipse")
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,plot="ellipse")
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="-")
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
cor(dataset)
cor(dataset)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
validation <- dataset[-validation_index,]
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$PlacedOrNot)
runApp('placementPredictionApp.R')
library(shiny); runApp('placementPredictionApp.R')
dataset <- read.csv(choose.files())
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
library(caret)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
runApp('placementPredictionApp.R')
library(shiny); runApp('placementPredictionApp.R')
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
runApp('placementPredictionApp.R')
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$PlacedOrNot)
runApp('placementPredictionApp.R')
runApp('placementPredictionApp.R')
shinyApp(ui, server)
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$PlacedOrNot)
runApp('placementPredictionApp.R')
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
runApp('placementPredictionApp.R')
runApp('placementPredictionApp.R')
runApp('placementPredictionApp.R')
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$PlacedOrNot)
runApp('placementPredictionApp.R')
runApp('testapp.R')
runApp('placementPredictionApp.R')
runApp('placementPredictionApp.R')
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$PlacedOrNot)
library(shiny); runApp('placementPredictionApp.R')
library(caret)
dataset <- read.csv(choose.files())
cor(dataset)
summary(dataset)
cor(dataset)
dataset$Gender<-factor(dataset$Gender)
dataset$Stream<-factor(dataset$Stream)
dataset$Internships<-factor(dataset$Internships)
dataset$Hostel<-NULL
dataset$HistoryOfBacklogs<-factor(dataset$HistoryOfBacklogs)
dataset$PlacedOrNot<-factor(dataset$PlacedOrNot)
dim(dataset)
summary(dataset)
levels(dataset)
validation_index <- createDataPartition(dataset$PlacedOrNot,p=0.80,list=FALSE)
validation <- dataset[-validation_index,]
dataset <- dataset[validation_index,]
dim(dataset)
sapply(dataset,class)
cor(dataset)
head(dataset)
summary(dataset)
plot(x=dataset$PlacedOrNot,y=dataset$CGPA,type="o")
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(PlacedOrNot~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(PlacedOrNot~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(PlacedOrNot~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(PlacedOrNot~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(PlacedOrNot~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.rf, validation)
confusionMatrix(predictions, validation$PlacedOrNot)
library(shiny); runApp('placementPredictionApp.R')
runApp('placementPredictionApp.R')
